超详细的CMD DOS下符号的作用参考
因关于DOS符号的总结很少，所以根据[1]，经过几次整理之后，写了下面这个《CMD/DOS符号参考》，推荐新手好好看看，老手温习。

　　正文开始：
　　一、单符号
　　~
　　① 在for中表示使用增强的变量扩展。
　　② 在%var:~n,m%中表示使用扩展环境变量指定位置的字符串。
　　③ 在set/a中表示一元运算符，将操作数按位取反。
　　!
　　① 在set /a中一元运算符，表示逻辑非。比如set /a a=!0，这时a就表示逻辑1。
　　@
　　① 隐藏命令行本身的回显，常用于批处理中。
　　$
　　① 在findstr命令里面表示一行的结束。
　　② 在prompt命令里面，表示将其后的字符转义（符号化或者效果化）。
　　%
　　① 在set /a中的二元运算符，表示算术取余。
　　② 命令行环境下，在for命令in前，后面接一个字符（可以是字母、数字或者一些特定字符），表示指定一个循环或者遍历指标变量。
　　③ 批处理中，后接一个数字表示引用本批处理当前执行时的指定的参数。
　　④ 其它情况下，%将会被脱去（批处理）或保留（命令行）
　　^
　　① 取消特定字符的转义作用，比如& | > < ! "等，但不包括%。比如要在屏幕显示一些特殊的字符，比如> >> | ^ &等符号时，就可以在其前面加一个^符号来显示这个^后面的字符了，^^就是显示一个^，^|就是显示一个|字符了;
　　② 在set/a中的二元运算符，表示按位异或。
　　③ 在findstr/r的[]中表示不匹配指定的字符集。
　　&
　　① 命令连接字符。比如我要在一行文本上同时执行两个命令，就可以用&命令连接这两个命令。
　　② 在set/a中是按位与。
　　*
　　① 代表任意个任意字符，就是我们通常所说的"通配符";比如想在c盘的根目录查找c盘根目录里所有的文本文件(.txt)，那么就可以输入命令"dir c:\*.txt"。
　　② 在set /a中的二元运算符，表示算术乘法。
　　③ 在findstr/r中表示将前一个字符多次匹配。
　　-
　　① 范围表示符，比如日期的查找，for命令里的tokens操作中就可以用到这个字符。
　　② 在findstr/r中连接两个字符表示匹配范围。
　　③ -跟在某些命令的/后表示取反向的开关。
　　④ 在set /a中：
　　1.表示一个负数。
　　2.表示算术减运算。
　　+
　　① 主要是在copy命令里面会用到它，表示将很多个文件合并为一个文件，就要用到这个+字符了。
　　② 在set/a中的二元运算符,表示算术加法。
　　① 标签定位符，表示其后的字符串为以标签，可以作为goto命令的作用对象。比如在批处理文件里面定义了一个":begin"标签，用"goto begin"命令就可以转到":begin"标签后面来执行批处理命令了。
　　② 在%var:string1=string2%中分隔变量名和被替换字串关系。
　　|
　　① 管道符，就是将上一个命令的输出，作为下一个命令的输入."dir /a/b |more"就可以逐屏的显示dir命令所输出的信息。
　　② 在set/a中的二元运算符，表示按位或。
　　③ 在帮助文档中表示其前后两个开关、选项或参数是二选一的。
　　/ 　　① 表示其后的字符（串）是命令的功能开关（选项）。比如"dir /s/b/a-d"表示"dir"命令指定的不同的参数。
　　② 在set/a中表示除法。
　　>
　　① 命令重定向符，将其前面的命令的输出结果重新定向到其后面的设备中去，后面的设备中的内容被覆盖。比如可以用"dir > lxmxn.txt"将"dir"命令的结果输出到"lxmxn.txt"这个文本文件中去。
　　② 在findstr/r中表示匹配单词的右边界，需要配合转义字符\使用。
　　<
　　① 将其后面的文件的内容作为其前面命令的输入。
　　② 在findstr/r中表示匹配单词的左边界，需要配合转义字符\使用。
　　=
　　① 赋值符号，用于变量的赋值。比如"set a=windows"的意思意思是将"windows"这个字符串赋给变量"a"。
　　② 在set/a中表示算术运算，比如"set /a x=5-6*5"。
　　\
　　① 这个"\"符号在有的情况下，代表的是当前路径的根目录.比如当前目录在c:\windows\system32下，那么你"dir \"的话，就相当与"dir c:\"。
　　② 在findstr/r中表示正则转义字符。
　　,
　　① 在set /a中表示连续表达式的分割符。
　　② 在某些命令中分割元素。
　　.
　　① 在路径的\后紧跟或者单独出现时：
　　一个.表示当前目录。
　　两个.表示上一级目录。
　　② 在路径中的文件名中出现时：
　　最后的一个.表示主文件名与扩展文件名的分隔。
　　?
　　① 在findstr/r中表示在此位置匹配一个任意字符。
　　② 在路径中表示在此位置通配任意一个字符。
　　③ 紧跟在/后表示获取命令的帮助文档。
　　二、多符号(符号不能分隔)
　　&&
　　① 连接两个命令，当&&前的命令成功时，才执行&&后的命令。
　　||
　　① 连接两个命令，当||前的命令失败时，才执行||后的命令。
　　>&
　　① 将一个句柄的输出写入到另一个句柄的输入中。
　　<&
　　① 从一个句柄读取输入并将其写入到另一个句柄输出中。
　　%%
　　① 两个连续的%表示在预处理中脱为一个%。
　　② 批处理中，在for语句的in子句之前，连续两个%紧跟一个字符（可以是字母、数字和一些特定字符），表示指定一个循
　　环或者遍历指标变量。
　　③ 批处理中，在for语句中，使用与in之前指定的指标变量相同的串，表示引用这个指标变量。
　　>>
　　① 命令重定向符，将其前面的命令的输出结果追加到其后面的设备中去。
　　② 在set /a中的二元运算符，表示逻辑右移。
　　==
　　① 在if命令中判断==两边的元素是否相同。
　　<<
　　① 在set /a中的二元运算符，表示逻辑左移。
　　+=
　　① 在set /a中的二元运算符。例如set /a a+=b表示将a加上b的结果赋值给a。
　　-=
　　① 在set /a中的二元运算符。例如set /a a-=b表示将a减去b的结果赋值给a。
　　*=
　　① 在set /a中的二元运算符。例如set /a a*=b表示将a乘以b的结果赋值给a。
　　/=
　　① 在set /a中的二元运算符。例如set /a a/=b表示将a除以b的结果赋值给a。
　　%=
　　① 在set /a中的二元运算符。例如set /a a%=b表示将a除以b的余数赋值给a。
　　【注：命令行可以直接用 set /a a%=b ，在批处理里面可以用 set /a a%%=b 。】
　　^=
　　① 在set /a中的二元运算符。例如set /a a"^="b表示将a与b按位异的结果赋值给a。
　　【注：这里 "^=" 加引号是为了防止^被转义，下同。】
　　&=
　　① 在set /a中的二元运算符。例如set /a a"&="b表示将a与b按位与的结果赋值给a。
　　|=
　　① 在set /a中的二元运算符。例如set /a a"|="b表示将a与b按位或的结果赋值给a。
　　<<=
　　① 在set /a中的二元运算符。例如set /a a"<<="b表示将a按位左移b位的结果赋值给a。
　　>>=
　　① 在set /a中的二元运算符。例如set /a a">>="b表示将a按位右移b位的结果赋值给a。
　　\<
　　① 在findstr的一般表达式中表示字的开始处。
　　\>
　　① 在findstr的一般表达式中表示字的结束处。
　　__________________________________________________________________________________
　　三、双符号对(两个符号之间须指定字符串)
　　! !
　　① 当启用变量延迟时，使用!!将变量名扩起来表示对变量值的引用。
　　' '
　　① 在for/f中表示将它们包含的内容当作命令行执行并分析其输出。
　　② 在for/f "usebackq"中表示将它们包含的字符串当作字符串分析。
　　( )
　　① 命令包含或者是具有优先权的界定符，比如for命令要用到这个()，我们还可以在if，echo等命令中见到它的身影。
　　② 在set /a中表示表达式分组。
　　" "
　　① 界定符，在表示带有空格的路径时常要用""来将路径括起来，在一些命令里面也需要" "符号。
　　② 在for/f中将表示它们包含的内容当作字符串分析。
　　③ 在for/f "usebackq"表示它们包含的内容当作文件路径并分析其文件的内容。
　　④ 在其它情况下表示其中的内容是一个完整的字符串，其中的>、>>、<、&、|、空格等不再转义。
　　` `
　　① 在for/f中表示它们所包含的内容当作命令行执行并分析它的输出。
　　% %
　　① 使用两个单独的%包含一个字符串表示引用以此串为名的环境变量。比如一个%time%可以扩展到当前的系统时间。
　　[ ]
　　① 在帮助文档表示其中的开关、选项或参数是可选的。
　　② 在findstr /r中表示按其中指定的字符集匹配。 