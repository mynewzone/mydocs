
程序发展侧重：牺牲空间保效率，牺牲效率保易懂

源码级的效率优化：

1.在可以用file_get_contents替代file、fopen、feof、fgets等系列方法的情况下，尽量用 file_get_contents，因为他的效率高得多!但是要注意file_get_contents在打开一个URL文件时候php版本问题;

2.尽量的少进行文件操作，虽然PHP的文件操作效率也不低的;

3.尽可能的使用PHP内部函数

4.在可以用PHP内部字符串操作函数的情况下，不要用正则表达式;

5.foreach效率更高，尽量用foreach代替while和for循环;

6.用单引号替代双引号引用字符串;

7.对global变量，应该用完就unset()掉

8.在多重嵌套循环中，如有可能，应当将最长的循环放在内层，最短循环放在外层，这样就可以减少cpu跨切循环层的次数，从而优化程序性能。

9.如果一个方法可静态化，就对它做静态声明。速率可提升至4倍。

10.注销那些不用的变量尤其是大数组，以便释放内存。（重点，用完一些变量后要记得unset，否则当前内存块用完后，会申请新的大块内存，会消耗更多额外的资源）

11.尽量避免使用__get，__set，__autoload （这样会多一次函数引用，除了__autoload在一些开发模式中的必须的，。__get和__set应该少用）

12.require_once()代价昂贵。可考虑采用 isset($GLOBALS['xxx']) or require 'xxx.php'; 替代 （文件头部定义的全局变量和文件名是有关联的）

13.在包含文件时使用完整路径，解析操作系统路径所需的时间会更少。

14.如果你想知道脚本开始执行（译注：即服务器端收到客户端请求）的时刻，使用$_SERVER[‘REQUEST_TIME']要好于time()。

15.str_replace函数比preg_replace函数快，但strtr函数的效率是str_replace函数的四倍。

16.不要做无谓的替换，先使用strpos判断是否需要替换，要替换再str_replace,能提升200%的效率

17.使用选择分支语句（译注：即switch case）好于使用多个if，else if语句。

18.用@屏蔽错误消息的做法非常低效。要尽量少用，效率差了3倍，特别不要在循环中使用

19.打开Apache的mod_deflate模块，可以提高网页的浏览速度。模块提供了DEFLATE输出过滤器，会将内容压缩。

20.尽量不要在for循环中使用函数，比如for ($x=0; $x < count($array); $x)每循环一次都会调用count()函数。

21.递增局部变量最快，递增全局变量慢2倍，递增对象属性慢3倍。

22.仅定义一个局部变量而没在函数中调用它，同样会减慢速度（其程度相当于递增一个局部变量）。PHP大概会检查看是否存在全局变量。

23.Apache解析一个PHP脚本的时间要比解析一个静态HTML页面慢2至10倍。尽量多用静态HTML页面，少用脚本。

24.除非脚本可以缓存，否则每次调用时都会重新编译一次。引入一套PHP缓存机制通常可以提升25%至100%的性能，以免除编译开销。

25.当执行变量$i的递增或递减时，$i++会比++$i慢一些。这种差异是PHP特有的，并不适用于其他语言，所以请不要修改你的C或Java代码并指望它们能立即变快，没用的。++$i更快是因为它只需要3条指令(opcodes)，$i++则需要4条指令。后置递增实际上会产生一个临时变量，这个临时变量随后被递增。而前置递增直接在原值上递增。这是最优化处理的一种，正如Zend的PHP优化器所作的那样。牢记这个优化处理不失为一个好主意，因为并不是所有的指令优化器都会做同样的优化处理，并且存在大量没有装配指令优化器的互联网服务提供商（ISPs）和服务器。

26.并不是事必面向对象(OOP)，面向对象往往开销很大，每个方法和对象调用都会消耗很多内存。

27.如果在代码中存在大量耗时的函数，你可以考虑用C扩展的方式实现它们。

28.优化select sql 语句，除非表字段，sql关键字尽量使用大写字母

29.用 i+=1 代替 i = i + 1。符合c的写法，效率更高。

30.使用 array_map 快速处理数组元素，无需使用foreach

31.使用 php filter 验证数据 url，email 和 ip等，避免使用正则表达式


---------------------------------------------------------------------

横向并表：join

纵向并表：union （union all 不去除重复）















